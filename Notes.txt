MetaMask Test Eth Networks:
    Rinkeby - 3 TestEth from https://www.rinkeby.io/#faucet
    Ropsten - ERROR 500 (check later or use Glitter)
    Goerli - ERROR 500 (check later - when twitter acct is a week old)

View changes and transactions on the blockchain at etherscan.io

MetaMask <--> Infura (Block Explorer - uses RESTful API connects to chain node) <--> Blockchain Node <--> Blockchain Network

MetaMask Behind the Scenes Takeaways:
    - You need a blockchain node to interact with the blockchain 
    - Blockchain is "the single source of truth" - shared ledger allowing us all access to the data

Gas is a transactional fee taken on Eth transfers

Transactional Objects:
    from: [account]
    to: [account](optional)
    value: [integer] in wei
    /-- additional objects --\
    gas: maximum amount of gas used
    gasPrice: amount of wei per gas
    data: ABI byte string (optional)
    nonce: Integer of a nonce (integer that is incremented every time a transaction is sent - security measure to avoid replay attacks)

Signatures:
    - used to verify authenticity of a transaction and prevent malicious transfer activities
    - https://web3js.readthedocs.io/en/v1.2.11/web3-eth-accounts.html#signtransaction
    - web3.eth.accounts.signTransaction(tx, privateKey [, callback]);

    Signature Process Breakdown:

        Transaction {
            from: [sending account address]
            to: [receiving account address]
            value: [amount to send]
        }
        - MetaMask signs transaction with Private Key - 32-bytes (64 hex characters)
        - Private Key is send through ECDSA (Elliptic Curve Digital Signature Algorithm) to generate a Public Key
        - Public Key is passed to Eth account
        - Private Key is used to sign transaction
        - Signature (private key) can then be verified by comparing public key and eth account (both generated off of private key) using an ECRECOVER function

Cryptographic Hashing:
    HashFunction - takes an input and outputs a digest
        i.e. HashFunction("some string") => "hash string of random characters"
    Ideal Cryptographic Hash has 5 main properties:
        - It is deterministic (same message always resluts in the same hash)
        - It is quick to compute the hash value for any given message
        - It is infeasible to generate a message from its hash value except by trying all possible messages
        - A small change to input should change the hash value so extensively that the new hash value appears uncorrelated with the old hash value
        - It is impossible to find two different messages with the same hash value
    Blockchain Hashing + Decentralization:
        - To access and change one hash, you would have to access every node on the blockchain and change it there as well

    Takeaways:
        - Hashing is the mathematical foundation of Blockchains
        - Blocks always have hashes of previous blocks - are chained together
        - Changing information in a previous block changes all blocks thereafter

Smart Contracts:
    A piece of code running on a blockchain
        - "A state machine"
        - Needs transactions to change state
        - Can do logic operations
    State change happens through mining + transactions
    Is Turing complete - which means in theory it can solve any computation problem

Structures of Solidity Contracts:
    - Class like structures
    - Contains functions
    - Control structures (if/else)
    - Loops
    - DataTypes (int, boolean, arrays, Struct, Mapping, Address, NO FLOATS - cannot convert data dynamically like JS)
    - Inheritable
    - Special structures like "modifiers"
    - Imports

Solidity Syntax/Layout:
    - Pragma is a pre-compiler statement which locks in the Solidity compiler version
    - Contract naming convention is CapWords style

Solidity Takeaways:
    - Smart Contracts running on blockchain
    - Deployed as EVM Bytecode
    - Turing complete

Ganache:
    - Choose quickstrart (Ethereum)
    - Connect via remix by selecting Web3 Provider and inputing localhost ip + port (listed in Ganache UI top-middle)

Blockchain Network:
    - Main Network - Eth costs money, minimal changes to underlying protocol of network, persistent 
    - Testing Networks - forked from main, persistent but can be deleted, real blockchain, beta release:
        - Ropsten
        - Rinkeby
        - GÃ¶rli
    - Developer Networks - simulated blockchain, unit testing, fast transactions (no mining), non-persistent:
        - Ganache
        - JavaScript VM

Simple Variables:
    Types: 
        - Boolean
            - Keyword: bool
            - Can negate ("myBool != myBool")
            - And/Or operators: &&, ||
        - Int/unit
            - (Unsigned) Integer
            - uint8 = 0 - 255
            - int8 = -128 - +127
            - 2^8 => 2**8
            - uint256 => 2^256
            - uint defaults to uint256
        - Address
            - Every interaction on Ethereum is address based
            - Holds a 20 byte value (Ethereum Address)
            - Used to transfer ether from smart contracts to the address or from an address to a smart contract
            - Address and Address payable
            - Has a balance field (.balance) which holds address balance in Wei
        - Dynamically sized byte arrays (String)
            - Strings and bytes
            - Both are special arrays
            - String is equal to byte, but does not have a length or index-access
            - Byte does have length/index access
            - Bytes for arbitrary length raw data
            - String for arbitrary length string (UTF-8) data
            - Strings are expensive to save and work with in Solidity - use bytes wherever possible
        - Enum
            - Another way to define your own variables/types
            - Will be integers internally
        - Array
            - Better to use mappings for gas consumption
            - Fixed or dynamic size
        - Struct
            - Create your own variable/type
                EX:
                    struct Funder {
                        address addr;
                        uint amount;
                    }
                    Funder _funder;
                    _funder.addr = 0x345
                    _funder.amount = 0
            - Non-recursive (no Structs in Structs)
            - Better for gas consumption to use Struct instead of objects
        - Mapping
            - Like hash maps 
            - Initialized by default
            - Doesn't have length
            - Public state mappings automatically creat getter function
        - No support for fixed point numbers (at time of lesson recording - upcoming feature might be out by now)
    All variables are intialized by default
        - There is no 'null' or 'undefined'
        - (U)int = 0
        - Bool = false
        - String = ''
    Public variables generate a get with the name of the variable 
        - You cannot create a funtion with the same name of a variable
    Reference types need a memory location (memory/storage)

Addresses (Extended):
    - Remember: All information on the blockchain is public
        - It's a global database
    - Address has two important members:
        - .balance
            - balance of account in wei
        - .transfer(amount)
            - transfers from the Smart Contract to the address an amount in wei
        - .send()
            - returns a Boolean, does not cascade exceptions

Global Objects:
    - Help understand where transactions come from and what happens inside
    - Three very important global properties:
        - msg.sender: The address of the account intialized in the transaction
        - msg.value: Amount of Ether sent along 
        - now: current timestamp (can be influenced by miners, don't use for odd/even numbers)

Payable Functions:
    - A function cannot recieve Ether unless it is marked "payable"
        - address payable myAddress
        - function myFunction() public payable {...}

Start, Stopping, and Deleting Explained:
    - Smart Contracts get compiled and sent to the blockchain as a transaction
    - Transactions, once mined, are immutable (data cannot be deleted, only the state can be altered)
    - Once a Smart Contract is destroyed, you can't interact with it anymore 

View and Pure: 
    - View
        - Accessing state variables (reading functions)
    - Pure  
        - No accessing state variables


